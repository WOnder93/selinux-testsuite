## <summary>Policy for running selinux-testsuite</summary>
#

########################################
## <summary>
##	Allow domain to be entered from the calling user (unconfined_t
##	or sysadm_t).
## </summary>
## <param name="domain">
##	Domain allowed to transition.
## </param>
#
interface(`testsuite_domain_transition',`
	# unconfined_t
	optional_policy(`
		gen_require(`
			type unconfined_t;
			#role unconfined_r;
		')

		# Transition from the caller to the test domain.
		allow unconfined_t $1:process transition;
		#role unconfined_r types $1;
		# Report back from the test domain to the caller.
		allow $1 unconfined_t:fd use;
		allow $1 unconfined_t:fifo_file { read write ioctl getattr };
		allow $1 unconfined_t:process { sigchld };
	')

	# sysadm_t
	optional_policy(`
		ifdef(`userdom_sysadm_entry_spec_domtrans_to',` dnl
			userdom_sysadm_entry_spec_domtrans_to($1)
		', ` dnl
			sysadm_entry_spec_domtrans_to($1)
		')
	')

	# allow to use leaked fd from init/init scripts
	allow $1 init_t:fd use;
	allow $1 initrc_t:fd use;
	allow $1 console_device_t:chr_file { read write ioctl };
	term_use_all_ptys($1)
')

interface(`testsuite_domain_transition_auto',`
	testsuite_domain_transition($1)
	optional_policy(`
		gen_require(`
			type unconfined_t;
		')
		domtrans_pattern(unconfined_t, $2, $1)
	')
	optional_policy(`
		gen_require(`
			type sysadm_t;
		')
		domtrans_pattern(sysadm_t, $2, $1)
	')
')

########################################
## <summary>
##	An alternative to domain_type() without some unwanted rules.
## </summary>
## <param name="domain">
##	Domain allowed access.
## </param>
#
interface(`test_minimal_domain_type',`
	gen_require(`
		type setrans_var_run_t, syslogd_t;
	')

	allow $1 proc_t:dir { search };
	allow $1 proc_t:lnk_file { read };
	allow $1 self:dir { search };
	allow $1 self:file { open read write };
	dontaudit init_t syslogd_t:fd use;
	dontaudit $1 security_t:filesystem getattr;
	dontaudit $1 self:file getattr;
	dontaudit $1 setrans_var_run_t:dir search;

	optional_policy(`
		gen_require(`
			type unconfined_t;
		')
		dontaudit unconfined_t $1:process { noatsecure rlimitinh siginh };
	')
')

# Workarounds for refpolicy:

ifdef(`dev_rw_infiniband_dev', `', ` dnl
interface(`dev_rw_infiniband_dev', `
    dev_rw_generic_blk_files($1)
    dev_rw_generic_chr_files($1)
')
')

ifdef(`mount_rw_pid_files', `', ` dnl
interface(`mount_rw_pid_files', `
    mount_rw_runtime_files($1)
')
')

# Refpolicy does not have admin_home_t - assume /root will be user_home_dir_t.
ifdef(`userdom_search_admin_dir', `', ` dnl
interface(`userdom_search_admin_dir', `
    userdom_search_user_home_content($1)
')
')

# If the macro is not defined, then most probably module_request permission
# is just not supported (and relevant operations should be just allowed).
ifdef(`kernel_request_load_module', `', ` dnl
interface(`kernel_request_load_module', `')
')

# We need to open-code these interfaces, because the system-provided ones will
# likely grant the lockdown permissions we want to test.
interface(`testsuite_read_debugfs_nolockdown',`
	gen_require(`
		type debugfs_t;
	')

	read_files_pattern($1, debugfs_t, debugfs_t)
')
interface(`testsuite_read_tracefs_nolockdown',`
	gen_require(`
		type tracefs_t;
	')

	read_files_pattern($1, tracefs_t, tracefs_t)
')
